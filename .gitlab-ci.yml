default:
  image: 
    name: hashicorp/terraform
    entrypoint: [""]
  timeout: 15 minutes
  cache:
    - key: $CI_COMMIT_REF_SLUG-terraform-cache
      paths:
        - .terraform/
        - .terraform.lock.hcl
    - key: $CI_COMMIT_REF_SLUG-ssh-private-key
      paths:
        - gitlab.pub
    - key: hosts
      paths:
        - hosts
        
variables:
  TF_DIR: ${CI_PROJECT_DIR}
  STATEFILE_NAME: "terraform.tfstate"   
  ADDRESS: "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/terraform/state/${STATEFILE_NAME}"

stages:
  - format
  - init  
  - generate_ssh_keys
  - validate
  - apply
  - configure
  - destroy

.format:
  stage: format
  script:
    - terraform fmt
  cache: []

download_provider:
  stage: init
  script:
    - terraform init
      -backend-config="address=${ADDRESS}"
      -backend-config="lock_address=${ADDRESS}/lock"
      -backend-config="unlock_address=${ADDRESS}/lock"
      -backend-config="username=${GITLAB_USERNAME}" 
      -backend-config="password=${GITLAB_ACCESS_TOKEN}"
      -backend-config="lock_method=POST" 
      -backend-config="unlock_method=DELETE"
      -backend-config="retry_wait_min=5" 

generate_ssh_keys:
  stage: generate_ssh_keys
  image: 
    name: kunchalavikram/ssh-keygen
    entrypoint: [""]
  script:
    - ssh-keygen -t rsa -f ./gitlab -q -P ""
    - ls -al
  # cache: []
  artifacts:
    paths:
      - gitlab

validate:
  stage: validate
  script:
    - ls -al
    - terraform validate

apply_configuration:
  stage: apply
  script:
    - ls -al
    - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - terraform apply -auto-approve
  artifacts:
    paths:
      - hosts

ansible:
  stage: configure
  image: 
    name: alpinelinux/ansible:latest
    entrypoint: [""]
  script:
    - ls -al
    - ansible-playbook -i hosts install-apache.yml

destroy_infra:
  when: manual
  stage: destroy
  script:
    - terraform destroy -auto-approve
